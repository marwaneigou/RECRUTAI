{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\igou\\\\Desktop\\\\RecrutIA - Copy\\\\frontend\\\\smart-recruit-app\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useReducer, useEffect } from 'react';\nimport { authAPI } from '../services/api';\nimport { getStoredToken, setStoredToken, removeStoredToken } from '../utils/auth';\nimport toast from 'react-hot-toast';\n\n// Initial state\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  user: null,\n  token: null,\n  isAuthenticated: false,\n  isLoading: true,\n  error: null\n};\n\n// Action types\nconst AUTH_ACTIONS = {\n  SET_LOADING: 'SET_LOADING',\n  LOGIN_SUCCESS: 'LOGIN_SUCCESS',\n  LOGOUT: 'LOGOUT',\n  SET_ERROR: 'SET_ERROR',\n  CLEAR_ERROR: 'CLEAR_ERROR',\n  UPDATE_USER: 'UPDATE_USER'\n};\n\n// Reducer\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case AUTH_ACTIONS.SET_LOADING:\n      return {\n        ...state,\n        isLoading: action.payload\n      };\n    case AUTH_ACTIONS.LOGIN_SUCCESS:\n      return {\n        ...state,\n        user: action.payload.user,\n        token: action.payload.token,\n        isAuthenticated: true,\n        isLoading: false,\n        error: null\n      };\n    case AUTH_ACTIONS.LOGOUT:\n      return {\n        ...state,\n        user: null,\n        token: null,\n        isAuthenticated: false,\n        isLoading: false,\n        error: null\n      };\n    case AUTH_ACTIONS.SET_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n        isLoading: false\n      };\n    case AUTH_ACTIONS.CLEAR_ERROR:\n      return {\n        ...state,\n        error: null\n      };\n    case AUTH_ACTIONS.UPDATE_USER:\n      return {\n        ...state,\n        user: {\n          ...state.user,\n          ...action.payload\n        }\n      };\n    default:\n      return state;\n  }\n};\n\n// Create context\nconst AuthContext = /*#__PURE__*/createContext();\n\n// Auth provider component\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  // Initialize auth state on app load\n  useEffect(() => {\n    const initializeAuth = async () => {\n      try {\n        const token = getStoredToken();\n        if (token) {\n          // Verify token and get user data\n          const response = await authAPI.getProfile();\n          if (response.success) {\n            dispatch({\n              type: AUTH_ACTIONS.LOGIN_SUCCESS,\n              payload: {\n                user: response.data.user,\n                token\n              }\n            });\n          } else {\n            // Token is invalid, remove it\n            removeStoredToken();\n            dispatch({\n              type: AUTH_ACTIONS.SET_LOADING,\n              payload: false\n            });\n          }\n        } else {\n          dispatch({\n            type: AUTH_ACTIONS.SET_LOADING,\n            payload: false\n          });\n        }\n      } catch (error) {\n        console.error('Auth initialization error:', error);\n        removeStoredToken();\n        dispatch({\n          type: AUTH_ACTIONS.SET_LOADING,\n          payload: false\n        });\n      }\n    };\n    initializeAuth();\n  }, []);\n\n  // Login function\n  const login = async credentials => {\n    try {\n      dispatch({\n        type: AUTH_ACTIONS.SET_LOADING,\n        payload: true\n      });\n      dispatch({\n        type: AUTH_ACTIONS.CLEAR_ERROR\n      });\n      const response = await authAPI.login(credentials);\n      if (response.success) {\n        const {\n          user,\n          token\n        } = response.data;\n\n        // Store token\n        setStoredToken(token);\n\n        // Update state\n        dispatch({\n          type: AUTH_ACTIONS.LOGIN_SUCCESS,\n          payload: {\n            user,\n            token\n          }\n        });\n        toast.success(`Welcome back, ${user.name}!`);\n        return {\n          success: true\n        };\n      } else {\n        var _response$error;\n        const errorMessage = ((_response$error = response.error) === null || _response$error === void 0 ? void 0 : _response$error.message) || 'Login failed';\n        dispatch({\n          type: AUTH_ACTIONS.SET_ERROR,\n          payload: errorMessage\n        });\n        toast.error(errorMessage);\n        return {\n          success: false,\n          error: errorMessage\n        };\n      }\n    } catch (error) {\n      var _error$response, _error$response$data, _error$response$data$;\n      const errorMessage = ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : (_error$response$data$ = _error$response$data.error) === null || _error$response$data$ === void 0 ? void 0 : _error$response$data$.message) || 'Login failed';\n      dispatch({\n        type: AUTH_ACTIONS.SET_ERROR,\n        payload: errorMessage\n      });\n      toast.error(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Register function\n  const register = async userData => {\n    try {\n      dispatch({\n        type: AUTH_ACTIONS.SET_LOADING,\n        payload: true\n      });\n      dispatch({\n        type: AUTH_ACTIONS.CLEAR_ERROR\n      });\n      const response = await authAPI.register(userData);\n      if (response.success) {\n        const {\n          user,\n          token\n        } = response.data;\n\n        // Store token\n        setStoredToken(token);\n\n        // Update state\n        dispatch({\n          type: AUTH_ACTIONS.LOGIN_SUCCESS,\n          payload: {\n            user,\n            token\n          }\n        });\n        toast.success(`Welcome to Smart Recruit, ${user.name}!`);\n        return {\n          success: true\n        };\n      } else {\n        var _response$error2;\n        const errorMessage = ((_response$error2 = response.error) === null || _response$error2 === void 0 ? void 0 : _response$error2.message) || 'Registration failed';\n        dispatch({\n          type: AUTH_ACTIONS.SET_ERROR,\n          payload: errorMessage\n        });\n        toast.error(errorMessage);\n        return {\n          success: false,\n          error: errorMessage\n        };\n      }\n    } catch (error) {\n      var _error$response2, _error$response2$data, _error$response2$data2;\n      const errorMessage = ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : (_error$response2$data2 = _error$response2$data.error) === null || _error$response2$data2 === void 0 ? void 0 : _error$response2$data2.message) || 'Registration failed';\n      dispatch({\n        type: AUTH_ACTIONS.SET_ERROR,\n        payload: errorMessage\n      });\n      toast.error(errorMessage);\n      return {\n        success: false,\n        error: errorMessage\n      };\n    }\n  };\n\n  // Logout function\n  const logout = async () => {\n    try {\n      // Call logout API\n      await authAPI.logout();\n    } catch (error) {\n      console.error('Logout API error:', error);\n    } finally {\n      // Always clear local state\n      removeStoredToken();\n      dispatch({\n        type: AUTH_ACTIONS.LOGOUT\n      });\n      toast.success('Logged out successfully');\n    }\n  };\n\n  // Update user profile\n  const updateUser = userData => {\n    dispatch({\n      type: AUTH_ACTIONS.UPDATE_USER,\n      payload: userData\n    });\n  };\n\n  // Clear error\n  const clearError = () => {\n    dispatch({\n      type: AUTH_ACTIONS.CLEAR_ERROR\n    });\n  };\n\n  // Check if user has specific role\n  const hasRole = role => {\n    var _state$user, _state$user$role;\n    return ((_state$user = state.user) === null || _state$user === void 0 ? void 0 : (_state$user$role = _state$user.role) === null || _state$user$role === void 0 ? void 0 : _state$user$role.toLowerCase()) === role.toLowerCase();\n  };\n\n  // Check if user has any of the specified roles\n  const hasAnyRole = roles => {\n    return roles.some(role => hasRole(role));\n  };\n  const value = {\n    ...state,\n    login,\n    register,\n    logout,\n    updateUser,\n    clearError,\n    hasRole,\n    hasAnyRole\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 243,\n    columnNumber: 5\n  }, this);\n};\n\n// Custom hook to use auth context\n_s(AuthProvider, \"bgCdjuTOmPdSBRwTap80EFd9Y3U=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useReducer","useEffect","authAPI","getStoredToken","setStoredToken","removeStoredToken","toast","jsxDEV","_jsxDEV","initialState","user","token","isAuthenticated","isLoading","error","AUTH_ACTIONS","SET_LOADING","LOGIN_SUCCESS","LOGOUT","SET_ERROR","CLEAR_ERROR","UPDATE_USER","authReducer","state","action","type","payload","AuthContext","AuthProvider","children","_s","dispatch","initializeAuth","response","getProfile","success","data","console","login","credentials","name","_response$error","errorMessage","message","_error$response","_error$response$data","_error$response$data$","register","userData","_response$error2","_error$response2","_error$response2$data","_error$response2$data2","logout","updateUser","clearError","hasRole","role","_state$user","_state$user$role","toLowerCase","hasAnyRole","roles","some","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["C:/Users/igou/Desktop/RecrutIA - Copy/frontend/smart-recruit-app/src/contexts/AuthContext.js"],"sourcesContent":["import React, { createContext, useContext, useReducer, useEffect } from 'react'\nimport { authAPI } from '../services/api'\nimport { getStoredToken, setStoredToken, removeStoredToken } from '../utils/auth'\nimport toast from 'react-hot-toast'\n\n// Initial state\nconst initialState = {\n  user: null,\n  token: null,\n  isAuthenticated: false,\n  isLoading: true,\n  error: null\n}\n\n// Action types\nconst AUTH_ACTIONS = {\n  SET_LOADING: 'SET_LOADING',\n  LOGIN_SUCCESS: 'LOGIN_SUCCESS',\n  LOGOUT: 'LOGOUT',\n  SET_ERROR: 'SET_ERROR',\n  CLEAR_ERROR: 'CLEAR_ERROR',\n  UPDATE_USER: 'UPDATE_USER'\n}\n\n// Reducer\nconst authReducer = (state, action) => {\n  switch (action.type) {\n    case AUTH_ACTIONS.SET_LOADING:\n      return {\n        ...state,\n        isLoading: action.payload\n      }\n    \n    case AUTH_ACTIONS.LOGIN_SUCCESS:\n      return {\n        ...state,\n        user: action.payload.user,\n        token: action.payload.token,\n        isAuthenticated: true,\n        isLoading: false,\n        error: null\n      }\n    \n    case AUTH_ACTIONS.LOGOUT:\n      return {\n        ...state,\n        user: null,\n        token: null,\n        isAuthenticated: false,\n        isLoading: false,\n        error: null\n      }\n    \n    case AUTH_ACTIONS.SET_ERROR:\n      return {\n        ...state,\n        error: action.payload,\n        isLoading: false\n      }\n    \n    case AUTH_ACTIONS.CLEAR_ERROR:\n      return {\n        ...state,\n        error: null\n      }\n    \n    case AUTH_ACTIONS.UPDATE_USER:\n      return {\n        ...state,\n        user: { ...state.user, ...action.payload }\n      }\n    \n    default:\n      return state\n  }\n}\n\n// Create context\nconst AuthContext = createContext()\n\n// Auth provider component\nexport const AuthProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(authReducer, initialState)\n\n  // Initialize auth state on app load\n  useEffect(() => {\n    const initializeAuth = async () => {\n      try {\n        const token = getStoredToken()\n        \n        if (token) {\n          // Verify token and get user data\n          const response = await authAPI.getProfile()\n          \n          if (response.success) {\n            dispatch({\n              type: AUTH_ACTIONS.LOGIN_SUCCESS,\n              payload: {\n                user: response.data.user,\n                token\n              }\n            })\n          } else {\n            // Token is invalid, remove it\n            removeStoredToken()\n            dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: false })\n          }\n        } else {\n          dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: false })\n        }\n      } catch (error) {\n        console.error('Auth initialization error:', error)\n        removeStoredToken()\n        dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: false })\n      }\n    }\n\n    initializeAuth()\n  }, [])\n\n  // Login function\n  const login = async (credentials) => {\n    try {\n      dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: true })\n      dispatch({ type: AUTH_ACTIONS.CLEAR_ERROR })\n\n      const response = await authAPI.login(credentials)\n\n      if (response.success) {\n        const { user, token } = response.data\n        \n        // Store token\n        setStoredToken(token)\n        \n        // Update state\n        dispatch({\n          type: AUTH_ACTIONS.LOGIN_SUCCESS,\n          payload: { user, token }\n        })\n\n        toast.success(`Welcome back, ${user.name}!`)\n        return { success: true }\n      } else {\n        const errorMessage = response.error?.message || 'Login failed'\n        dispatch({ type: AUTH_ACTIONS.SET_ERROR, payload: errorMessage })\n        toast.error(errorMessage)\n        return { success: false, error: errorMessage }\n      }\n    } catch (error) {\n      const errorMessage = error.response?.data?.error?.message || 'Login failed'\n      dispatch({ type: AUTH_ACTIONS.SET_ERROR, payload: errorMessage })\n      toast.error(errorMessage)\n      return { success: false, error: errorMessage }\n    }\n  }\n\n  // Register function\n  const register = async (userData) => {\n    try {\n      dispatch({ type: AUTH_ACTIONS.SET_LOADING, payload: true })\n      dispatch({ type: AUTH_ACTIONS.CLEAR_ERROR })\n\n      const response = await authAPI.register(userData)\n\n      if (response.success) {\n        const { user, token } = response.data\n        \n        // Store token\n        setStoredToken(token)\n        \n        // Update state\n        dispatch({\n          type: AUTH_ACTIONS.LOGIN_SUCCESS,\n          payload: { user, token }\n        })\n\n        toast.success(`Welcome to Smart Recruit, ${user.name}!`)\n        return { success: true }\n      } else {\n        const errorMessage = response.error?.message || 'Registration failed'\n        dispatch({ type: AUTH_ACTIONS.SET_ERROR, payload: errorMessage })\n        toast.error(errorMessage)\n        return { success: false, error: errorMessage }\n      }\n    } catch (error) {\n      const errorMessage = error.response?.data?.error?.message || 'Registration failed'\n      dispatch({ type: AUTH_ACTIONS.SET_ERROR, payload: errorMessage })\n      toast.error(errorMessage)\n      return { success: false, error: errorMessage }\n    }\n  }\n\n  // Logout function\n  const logout = async () => {\n    try {\n      // Call logout API\n      await authAPI.logout()\n    } catch (error) {\n      console.error('Logout API error:', error)\n    } finally {\n      // Always clear local state\n      removeStoredToken()\n      dispatch({ type: AUTH_ACTIONS.LOGOUT })\n      toast.success('Logged out successfully')\n    }\n  }\n\n  // Update user profile\n  const updateUser = (userData) => {\n    dispatch({\n      type: AUTH_ACTIONS.UPDATE_USER,\n      payload: userData\n    })\n  }\n\n  // Clear error\n  const clearError = () => {\n    dispatch({ type: AUTH_ACTIONS.CLEAR_ERROR })\n  }\n\n  // Check if user has specific role\n  const hasRole = (role) => {\n    return state.user?.role?.toLowerCase() === role.toLowerCase()\n  }\n\n  // Check if user has any of the specified roles\n  const hasAnyRole = (roles) => {\n    return roles.some(role => hasRole(role))\n  }\n\n  const value = {\n    ...state,\n    login,\n    register,\n    logout,\n    updateUser,\n    clearError,\n    hasRole,\n    hasAnyRole\n  }\n\n  return (\n    <AuthContext.Provider value={value}>\n      {children}\n    </AuthContext.Provider>\n  )\n}\n\n// Custom hook to use auth context\nexport const useAuth = () => {\n  const context = useContext(AuthContext)\n  \n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider')\n  }\n  \n  return context\n}\n\nexport default AuthContext\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}