{"ast":null,"code":"import Cookies from 'js-cookie';\nimport { jwtDecode } from 'jwt-decode';\n\n// Token storage key\nconst TOKEN_KEY = 'smart_recruit_token';\n\n/**\n * Store authentication token\n * @param {string} token - JWT token\n */\nexport const setStoredToken = token => {\n  try {\n    // Store in cookie (more secure than localStorage)\n    Cookies.set(TOKEN_KEY, token, {\n      expires: 7,\n      // 7 days\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'strict'\n    });\n\n    // Also store in localStorage as fallback\n    localStorage.setItem(TOKEN_KEY, token);\n  } catch (error) {\n    console.error('Error storing token:', error);\n  }\n};\n\n/**\n * Get stored authentication token\n * @returns {string|null} JWT token or null\n */\nexport const getStoredToken = () => {\n  try {\n    // Try to get from cookie first\n    let token = Cookies.get(TOKEN_KEY);\n\n    // Fallback to localStorage\n    if (!token) {\n      token = localStorage.getItem(TOKEN_KEY);\n    }\n\n    // Validate token if it exists\n    if (token && isTokenValid(token)) {\n      return token;\n    }\n\n    // Remove invalid token\n    if (token) {\n      removeStoredToken();\n    }\n    return null;\n  } catch (error) {\n    console.error('Error getting token:', error);\n    return null;\n  }\n};\n\n/**\n * Remove stored authentication token\n */\nexport const removeStoredToken = () => {\n  try {\n    Cookies.remove(TOKEN_KEY);\n    localStorage.removeItem(TOKEN_KEY);\n  } catch (error) {\n    console.error('Error removing token:', error);\n  }\n};\n\n/**\n * Check if token is valid (not expired)\n * @param {string} token - JWT token\n * @returns {boolean} True if token is valid\n */\nexport const isTokenValid = token => {\n  try {\n    if (!token) return false;\n    const decoded = jwtDecode(token);\n    const currentTime = Date.now() / 1000;\n\n    // Check if token is expired\n    return decoded.exp > currentTime;\n  } catch (error) {\n    console.error('Error validating token:', error);\n    return false;\n  }\n};\n\n/**\n * Get user data from token\n * @param {string} token - JWT token\n * @returns {object|null} User data or null\n */\nexport const getUserFromToken = token => {\n  try {\n    if (!token || !isTokenValid(token)) return null;\n    const decoded = jwtDecode(token);\n    return {\n      userId: decoded.userId,\n      email: decoded.email,\n      role: decoded.role\n    };\n  } catch (error) {\n    console.error('Error decoding token:', error);\n    return null;\n  }\n};\n\n/**\n * Check if user has specific role\n * @param {string} token - JWT token\n * @param {string} role - Role to check\n * @returns {boolean} True if user has the role\n */\nexport const hasRole = (token, role) => {\n  try {\n    var _userData$role;\n    const userData = getUserFromToken(token);\n    return (userData === null || userData === void 0 ? void 0 : (_userData$role = userData.role) === null || _userData$role === void 0 ? void 0 : _userData$role.toLowerCase()) === role.toLowerCase();\n  } catch (error) {\n    console.error('Error checking role:', error);\n    return false;\n  }\n};\n\n/**\n * Check if user has any of the specified roles\n * @param {string} token - JWT token\n * @param {string[]} roles - Array of roles to check\n * @returns {boolean} True if user has any of the roles\n */\nexport const hasAnyRole = (token, roles) => {\n  try {\n    const userData = getUserFromToken(token);\n    if (!(userData !== null && userData !== void 0 && userData.role)) return false;\n    return roles.some(role => userData.role.toLowerCase() === role.toLowerCase());\n  } catch (error) {\n    console.error('Error checking roles:', error);\n    return false;\n  }\n};\n\n/**\n * Format user role for display\n * @param {string} role - User role\n * @returns {string} Formatted role\n */\nexport const formatRole = role => {\n  if (!role) return 'Unknown';\n  const roleMap = {\n    'candidate': 'Candidate',\n    'employer': 'Employer',\n    'admin': 'Administrator'\n  };\n  return roleMap[role.toLowerCase()] || role;\n};\n\n/**\n * Get role-specific dashboard route\n * @param {string} role - User role\n * @returns {string} Dashboard route\n */\nexport const getDashboardRoute = role => {\n  if (!role) return '/dashboard';\n  const routeMap = {\n    'candidate': '/candidate/dashboard',\n    'employer': '/employer/dashboard',\n    'admin': '/admin/dashboard'\n  };\n  return routeMap[role.toLowerCase()] || '/dashboard';\n};\n\n/**\n * Validate password strength\n * @param {string} password - Password to validate\n * @returns {object} Validation result\n */\nexport const validatePassword = password => {\n  const result = {\n    isValid: false,\n    errors: [],\n    strength: 'weak'\n  };\n  if (!password) {\n    result.errors.push('Password is required');\n    return result;\n  }\n  if (password.length < 6) {\n    result.errors.push('Password must be at least 6 characters long');\n  }\n  if (!/[a-z]/.test(password)) {\n    result.errors.push('Password must contain at least one lowercase letter');\n  }\n  if (!/[A-Z]/.test(password)) {\n    result.errors.push('Password must contain at least one uppercase letter');\n  }\n  if (!/\\d/.test(password)) {\n    result.errors.push('Password must contain at least one number');\n  }\n\n  // Removed special character requirement for easier testing\n\n  // Calculate strength\n  let strengthScore = 0;\n  if (password.length >= 8) strengthScore++;\n  if (/[a-z]/.test(password)) strengthScore++;\n  if (/[A-Z]/.test(password)) strengthScore++;\n  if (/\\d/.test(password)) strengthScore++;\n  if (/[@$!%*?&]/.test(password)) strengthScore++;\n  if (password.length >= 12) strengthScore++;\n  if (strengthScore <= 2) {\n    result.strength = 'weak';\n  } else if (strengthScore <= 4) {\n    result.strength = 'medium';\n  } else {\n    result.strength = 'strong';\n  }\n  result.isValid = result.errors.length === 0;\n  return result;\n};\n\n/**\n * Generate avatar URL from user data\n * @param {object} user - User object\n * @returns {string} Avatar URL\n */\nexport const getAvatarUrl = user => {\n  if (user !== null && user !== void 0 && user.avatarUrl) {\n    return user.avatarUrl;\n  }\n\n  // Generate initials-based avatar\n  const name = (user === null || user === void 0 ? void 0 : user.name) || 'User';\n  const initials = name.split(' ').map(word => word.charAt(0).toUpperCase()).join('').slice(0, 2);\n  return `https://ui-avatars.com/api/?name=${encodeURIComponent(initials)}&background=3b82f6&color=ffffff&size=128`;\n};","map":{"version":3,"names":["Cookies","jwtDecode","TOKEN_KEY","setStoredToken","token","set","expires","secure","process","env","NODE_ENV","sameSite","localStorage","setItem","error","console","getStoredToken","get","getItem","isTokenValid","removeStoredToken","remove","removeItem","decoded","currentTime","Date","now","exp","getUserFromToken","userId","email","role","hasRole","_userData$role","userData","toLowerCase","hasAnyRole","roles","some","formatRole","roleMap","getDashboardRoute","routeMap","validatePassword","password","result","isValid","errors","strength","push","length","test","strengthScore","getAvatarUrl","user","avatarUrl","name","initials","split","map","word","charAt","toUpperCase","join","slice","encodeURIComponent"],"sources":["C:/Users/igou/Desktop/RecrutIA - Copy/frontend/smart-recruit-app/src/utils/auth.js"],"sourcesContent":["import Cookies from 'js-cookie'\nimport { jwtDecode } from 'jwt-decode'\n\n// Token storage key\nconst TOKEN_KEY = 'smart_recruit_token'\n\n/**\n * Store authentication token\n * @param {string} token - JWT token\n */\nexport const setStoredToken = (token) => {\n  try {\n    // Store in cookie (more secure than localStorage)\n    Cookies.set(TOKEN_KEY, token, {\n      expires: 7, // 7 days\n      secure: process.env.NODE_ENV === 'production',\n      sameSite: 'strict'\n    })\n    \n    // Also store in localStorage as fallback\n    localStorage.setItem(TOKEN_KEY, token)\n  } catch (error) {\n    console.error('Error storing token:', error)\n  }\n}\n\n/**\n * Get stored authentication token\n * @returns {string|null} JWT token or null\n */\nexport const getStoredToken = () => {\n  try {\n    // Try to get from cookie first\n    let token = Cookies.get(TOKEN_KEY)\n    \n    // Fallback to localStorage\n    if (!token) {\n      token = localStorage.getItem(TOKEN_KEY)\n    }\n    \n    // Validate token if it exists\n    if (token && isTokenValid(token)) {\n      return token\n    }\n    \n    // Remove invalid token\n    if (token) {\n      removeStoredToken()\n    }\n    \n    return null\n  } catch (error) {\n    console.error('Error getting token:', error)\n    return null\n  }\n}\n\n/**\n * Remove stored authentication token\n */\nexport const removeStoredToken = () => {\n  try {\n    Cookies.remove(TOKEN_KEY)\n    localStorage.removeItem(TOKEN_KEY)\n  } catch (error) {\n    console.error('Error removing token:', error)\n  }\n}\n\n/**\n * Check if token is valid (not expired)\n * @param {string} token - JWT token\n * @returns {boolean} True if token is valid\n */\nexport const isTokenValid = (token) => {\n  try {\n    if (!token) return false\n    \n    const decoded = jwtDecode(token)\n    const currentTime = Date.now() / 1000\n    \n    // Check if token is expired\n    return decoded.exp > currentTime\n  } catch (error) {\n    console.error('Error validating token:', error)\n    return false\n  }\n}\n\n/**\n * Get user data from token\n * @param {string} token - JWT token\n * @returns {object|null} User data or null\n */\nexport const getUserFromToken = (token) => {\n  try {\n    if (!token || !isTokenValid(token)) return null\n    \n    const decoded = jwtDecode(token)\n    return {\n      userId: decoded.userId,\n      email: decoded.email,\n      role: decoded.role\n    }\n  } catch (error) {\n    console.error('Error decoding token:', error)\n    return null\n  }\n}\n\n/**\n * Check if user has specific role\n * @param {string} token - JWT token\n * @param {string} role - Role to check\n * @returns {boolean} True if user has the role\n */\nexport const hasRole = (token, role) => {\n  try {\n    const userData = getUserFromToken(token)\n    return userData?.role?.toLowerCase() === role.toLowerCase()\n  } catch (error) {\n    console.error('Error checking role:', error)\n    return false\n  }\n}\n\n/**\n * Check if user has any of the specified roles\n * @param {string} token - JWT token\n * @param {string[]} roles - Array of roles to check\n * @returns {boolean} True if user has any of the roles\n */\nexport const hasAnyRole = (token, roles) => {\n  try {\n    const userData = getUserFromToken(token)\n    if (!userData?.role) return false\n    \n    return roles.some(role => \n      userData.role.toLowerCase() === role.toLowerCase()\n    )\n  } catch (error) {\n    console.error('Error checking roles:', error)\n    return false\n  }\n}\n\n/**\n * Format user role for display\n * @param {string} role - User role\n * @returns {string} Formatted role\n */\nexport const formatRole = (role) => {\n  if (!role) return 'Unknown'\n  \n  const roleMap = {\n    'candidate': 'Candidate',\n    'employer': 'Employer',\n    'admin': 'Administrator'\n  }\n  \n  return roleMap[role.toLowerCase()] || role\n}\n\n/**\n * Get role-specific dashboard route\n * @param {string} role - User role\n * @returns {string} Dashboard route\n */\nexport const getDashboardRoute = (role) => {\n  if (!role) return '/dashboard'\n  \n  const routeMap = {\n    'candidate': '/candidate/dashboard',\n    'employer': '/employer/dashboard',\n    'admin': '/admin/dashboard'\n  }\n  \n  return routeMap[role.toLowerCase()] || '/dashboard'\n}\n\n/**\n * Validate password strength\n * @param {string} password - Password to validate\n * @returns {object} Validation result\n */\nexport const validatePassword = (password) => {\n  const result = {\n    isValid: false,\n    errors: [],\n    strength: 'weak'\n  }\n  \n  if (!password) {\n    result.errors.push('Password is required')\n    return result\n  }\n  \n  if (password.length < 6) {\n    result.errors.push('Password must be at least 6 characters long')\n  }\n  \n  if (!/[a-z]/.test(password)) {\n    result.errors.push('Password must contain at least one lowercase letter')\n  }\n  \n  if (!/[A-Z]/.test(password)) {\n    result.errors.push('Password must contain at least one uppercase letter')\n  }\n  \n  if (!/\\d/.test(password)) {\n    result.errors.push('Password must contain at least one number')\n  }\n  \n  // Removed special character requirement for easier testing\n  \n  // Calculate strength\n  let strengthScore = 0\n  if (password.length >= 8) strengthScore++\n  if (/[a-z]/.test(password)) strengthScore++\n  if (/[A-Z]/.test(password)) strengthScore++\n  if (/\\d/.test(password)) strengthScore++\n  if (/[@$!%*?&]/.test(password)) strengthScore++\n  if (password.length >= 12) strengthScore++\n  \n  if (strengthScore <= 2) {\n    result.strength = 'weak'\n  } else if (strengthScore <= 4) {\n    result.strength = 'medium'\n  } else {\n    result.strength = 'strong'\n  }\n  \n  result.isValid = result.errors.length === 0\n  \n  return result\n}\n\n/**\n * Generate avatar URL from user data\n * @param {object} user - User object\n * @returns {string} Avatar URL\n */\nexport const getAvatarUrl = (user) => {\n  if (user?.avatarUrl) {\n    return user.avatarUrl\n  }\n  \n  // Generate initials-based avatar\n  const name = user?.name || 'User'\n  const initials = name\n    .split(' ')\n    .map(word => word.charAt(0).toUpperCase())\n    .join('')\n    .slice(0, 2)\n  \n  return `https://ui-avatars.com/api/?name=${encodeURIComponent(initials)}&background=3b82f6&color=ffffff&size=128`\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}