{"ast":null,"code":"import axios from 'axios';\nimport { getStoredToken, removeStoredToken } from '../utils/auth';\nimport toast from 'react-hot-toast';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:3000/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// Request interceptor to add auth token\napi.interceptors.request.use(config => {\n  const token = getStoredToken();\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n}, error => {\n  return Promise.reject(error);\n});\n\n// Response interceptor to handle errors\napi.interceptors.response.use(response => {\n  return response.data;\n}, error => {\n  var _data$error;\n  // Handle different error scenarios\n  if (error.response) {\n    const {\n      status,\n      data\n    } = error.response;\n    switch (status) {\n      case 401:\n        // Unauthorized - token expired or invalid\n        removeStoredToken();\n        if (window.location.pathname !== '/login') {\n          toast.error('Session expired. Please login again.');\n          window.location.href = '/login';\n        }\n        break;\n      case 403:\n        // Forbidden - insufficient permissions\n        toast.error('You do not have permission to perform this action.');\n        break;\n      case 404:\n        // Not found\n        toast.error('Resource not found.');\n        break;\n      case 429:\n        // Too many requests\n        toast.error('Too many requests. Please try again later.');\n        break;\n      case 500:\n        // Server error\n        toast.error('Server error. Please try again later.');\n        break;\n      default:\n        // Other errors\n        const errorMessage = (data === null || data === void 0 ? void 0 : (_data$error = data.error) === null || _data$error === void 0 ? void 0 : _data$error.message) || 'An error occurred';\n        toast.error(errorMessage);\n    }\n    return Promise.reject(error);\n  } else if (error.request) {\n    // Network error\n    toast.error('Network error. Please check your connection.');\n    return Promise.reject(error);\n  } else {\n    // Other error\n    toast.error('An unexpected error occurred.');\n    return Promise.reject(error);\n  }\n});\n\n// Authentication API\nexport const authAPI = {\n  // Login\n  login: async credentials => {\n    try {\n      const response = await api.post('/auth/login', credentials);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Register\n  register: async userData => {\n    try {\n      const response = await api.post('/auth/register', userData);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Get user profile\n  getProfile: async () => {\n    try {\n      const response = await api.get('/auth/me');\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Logout\n  logout: async () => {\n    try {\n      const response = await api.post('/auth/logout');\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Refresh token\n  refreshToken: async () => {\n    try {\n      const response = await api.post('/auth/refresh');\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Change password\n  changePassword: async passwordData => {\n    try {\n      const response = await api.post('/auth/change-password', passwordData);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  }\n};\n\n// Jobs API\nexport const jobsAPI = {\n  // Get all jobs\n  getJobs: async (params = {}) => {\n    try {\n      const response = await api.get('/jobs', {\n        params\n      });\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Get job by ID\n  getJob: async id => {\n    try {\n      const response = await api.get(`/jobs/${id}`);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Create job (employer only)\n  createJob: async jobData => {\n    try {\n      const response = await api.post('/jobs', jobData);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Update job (employer only)\n  updateJob: async (id, jobData) => {\n    try {\n      const response = await api.put(`/jobs/${id}`, jobData);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Delete job (employer only)\n  deleteJob: async id => {\n    try {\n      const response = await api.delete(`/jobs/${id}`);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  }\n};\n\n// Applications API\nexport const applicationsAPI = {\n  // Get applications\n  getApplications: async (params = {}) => {\n    try {\n      const response = await api.get('/applications', {\n        params\n      });\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Apply to job\n  applyToJob: async (jobId, applicationData) => {\n    try {\n      const response = await api.post(`/applications/apply/${jobId}`, applicationData);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Update application status (employer only)\n  updateApplicationStatus: async (id, status) => {\n    try {\n      const response = await api.patch(`/applications/${id}/status`, {\n        status\n      });\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  }\n};\n\n// Users API\nexport const usersAPI = {\n  // Update profile\n  updateProfile: async userData => {\n    try {\n      const response = await api.put('/users/profile', userData);\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  },\n  // Upload avatar\n  uploadAvatar: async file => {\n    try {\n      const formData = new FormData();\n      formData.append('avatar', file);\n      const response = await api.post('/users/avatar', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return response;\n    } catch (error) {\n      throw error;\n    }\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","getStoredToken","removeStoredToken","toast","api","create","baseURL","process","env","REACT_APP_API_URL","timeout","headers","interceptors","request","use","config","token","Authorization","error","Promise","reject","response","data","_data$error","status","window","location","pathname","href","errorMessage","message","authAPI","login","credentials","post","register","userData","getProfile","get","logout","refreshToken","changePassword","passwordData","jobsAPI","getJobs","params","getJob","id","createJob","jobData","updateJob","put","deleteJob","delete","applicationsAPI","getApplications","applyToJob","jobId","applicationData","updateApplicationStatus","patch","usersAPI","updateProfile","uploadAvatar","file","formData","FormData","append"],"sources":["C:/Users/igou/Desktop/RecrutIA - Copy/frontend/smart-recruit-app/src/services/api.js"],"sourcesContent":["import axios from 'axios'\nimport { getStoredToken, removeStoredToken } from '../utils/auth'\nimport toast from 'react-hot-toast'\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: process.env.REACT_APP_API_URL || 'http://localhost:3000/api',\n  timeout: 10000,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n})\n\n// Request interceptor to add auth token\napi.interceptors.request.use(\n  (config) => {\n    const token = getStoredToken()\n    if (token) {\n      config.headers.Authorization = `Bearer ${token}`\n    }\n    return config\n  },\n  (error) => {\n    return Promise.reject(error)\n  }\n)\n\n// Response interceptor to handle errors\napi.interceptors.response.use(\n  (response) => {\n    return response.data\n  },\n  (error) => {\n    // Handle different error scenarios\n    if (error.response) {\n      const { status, data } = error.response\n      \n      switch (status) {\n        case 401:\n          // Unauthorized - token expired or invalid\n          removeStoredToken()\n          if (window.location.pathname !== '/login') {\n            toast.error('Session expired. Please login again.')\n            window.location.href = '/login'\n          }\n          break\n        \n        case 403:\n          // Forbidden - insufficient permissions\n          toast.error('You do not have permission to perform this action.')\n          break\n        \n        case 404:\n          // Not found\n          toast.error('Resource not found.')\n          break\n        \n        case 429:\n          // Too many requests\n          toast.error('Too many requests. Please try again later.')\n          break\n        \n        case 500:\n          // Server error\n          toast.error('Server error. Please try again later.')\n          break\n        \n        default:\n          // Other errors\n          const errorMessage = data?.error?.message || 'An error occurred'\n          toast.error(errorMessage)\n      }\n      \n      return Promise.reject(error)\n    } else if (error.request) {\n      // Network error\n      toast.error('Network error. Please check your connection.')\n      return Promise.reject(error)\n    } else {\n      // Other error\n      toast.error('An unexpected error occurred.')\n      return Promise.reject(error)\n    }\n  }\n)\n\n// Authentication API\nexport const authAPI = {\n  // Login\n  login: async (credentials) => {\n    try {\n      const response = await api.post('/auth/login', credentials)\n      return response\n    } catch (error) {\n      throw error\n    }\n  },\n\n  // Register\n  register: async (userData) => {\n    try {\n      const response = await api.post('/auth/register', userData)\n      return response\n    } catch (error) {\n      throw error\n    }\n  },\n\n  // Get user profile\n  getProfile: async () => {\n    try {\n      const response = await api.get('/auth/me')\n      return response\n    } catch (error) {\n      throw error\n    }\n  },\n\n  // Logout\n  logout: async () => {\n    try {\n      const response = await api.post('/auth/logout')\n      return response\n    } catch (error) {\n      throw error\n    }\n  },\n\n  // Refresh token\n  refreshToken: async () => {\n    try {\n      const response = await api.post('/auth/refresh')\n      return response\n    } catch (error) {\n      throw error\n    }\n  },\n\n  // Change password\n  changePassword: async (passwordData) => {\n    try {\n      const response = await api.post('/auth/change-password', passwordData)\n      return response\n    } catch (error) {\n      throw error\n    }\n  }\n}\n\n// Jobs API\nexport const jobsAPI = {\n  // Get all jobs\n  getJobs: async (params = {}) => {\n    try {\n      const response = await api.get('/jobs', { params })\n      return response\n    } catch (error) {\n      throw error\n    }\n  },\n\n  // Get job by ID\n  getJob: async (id) => {\n    try {\n      const response = await api.get(`/jobs/${id}`)\n      return response\n    } catch (error) {\n      throw error\n    }\n  },\n\n  // Create job (employer only)\n  createJob: async (jobData) => {\n    try {\n      const response = await api.post('/jobs', jobData)\n      return response\n    } catch (error) {\n      throw error\n    }\n  },\n\n  // Update job (employer only)\n  updateJob: async (id, jobData) => {\n    try {\n      const response = await api.put(`/jobs/${id}`, jobData)\n      return response\n    } catch (error) {\n      throw error\n    }\n  },\n\n  // Delete job (employer only)\n  deleteJob: async (id) => {\n    try {\n      const response = await api.delete(`/jobs/${id}`)\n      return response\n    } catch (error) {\n      throw error\n    }\n  }\n}\n\n// Applications API\nexport const applicationsAPI = {\n  // Get applications\n  getApplications: async (params = {}) => {\n    try {\n      const response = await api.get('/applications', { params })\n      return response\n    } catch (error) {\n      throw error\n    }\n  },\n\n  // Apply to job\n  applyToJob: async (jobId, applicationData) => {\n    try {\n      const response = await api.post(`/applications/apply/${jobId}`, applicationData)\n      return response\n    } catch (error) {\n      throw error\n    }\n  },\n\n  // Update application status (employer only)\n  updateApplicationStatus: async (id, status) => {\n    try {\n      const response = await api.patch(`/applications/${id}/status`, { status })\n      return response\n    } catch (error) {\n      throw error\n    }\n  }\n}\n\n// Users API\nexport const usersAPI = {\n  // Update profile\n  updateProfile: async (userData) => {\n    try {\n      const response = await api.put('/users/profile', userData)\n      return response\n    } catch (error) {\n      throw error\n    }\n  },\n\n  // Upload avatar\n  uploadAvatar: async (file) => {\n    try {\n      const formData = new FormData()\n      formData.append('avatar', file)\n      \n      const response = await api.post('/users/avatar', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      })\n      return response\n    } catch (error) {\n      throw error\n    }\n  }\n}\n\nexport default api\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}