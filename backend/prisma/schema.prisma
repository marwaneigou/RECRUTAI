generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int       @id @default(autoincrement())
  uuid          String    @unique @default(uuid())
  name          String
  email         String    @unique
  passwordHash  String
  role          Role
  isActive      Boolean   @default(true)
  emailVerified Boolean   @default(false)
  phone         String?
  avatarUrl     String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  lastLogin     DateTime?

  employer      Employer?
  candidate     Candidate?
  sessions      Session[]
  notifications Notification[]

  @@map("users")
}

model Application {
  id                 Int               @id @default(autoincrement())
  jobId              Int
  candidateId        Int
  status             ApplicationStatus @default(pending)
  coverLetterId      String?           // Reference to MongoDB cover letter document
  cvSnapshotId       String?           // Reference to MongoDB CV snapshot document
  appliedAt          DateTime          @default(now())
  reviewedAt         DateTime?
  notes              String?
  rating             Int?              @db.SmallInt
  matchScore         Int?
  matchAnalysis      String?
  matchStrengths     Json?
  matchGaps          Json?
  matchCalculatedAt  DateTime?
  createdAt          DateTime          @default(now())
  updatedAt          DateTime          @updatedAt

  job       Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
  candidate Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  @@unique([jobId, candidateId])
  @@map("applications")
}

model Candidate {
  id                Int       @id @default(autoincrement())
  userId            Int       @unique
  firstName         String
  lastName          String
  dateOfBirth       DateTime?
  location          String?
  experienceYears   Int       @default(0)
  currentPosition   String?
  currentCompany    String?
  salaryExpectation Decimal?  @db.Decimal(10, 2)
  currency          String    @default("USD")
  availabilityDate  DateTime?
  linkedinUrl       String?
  githubUrl         String?
  portfolioUrl      String?
  cvDataId          String?   // Reference to MongoDB CV data document
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  applications     Application[]
  candidateSkills  CandidateSkill[]

  @@map("candidates")
}

model Job {
  id                  Int             @id @default(autoincrement())
  employerId          Int
  title               String
  description         String
  requirements        String?
  responsibilities    String?
  location            String?
  employmentType      EmploymentType
  experienceLevel     ExperienceLevel
  salaryMin           Decimal?        @db.Decimal(10, 2)
  salaryMax           Decimal?        @db.Decimal(10, 2)
  currency            String          @default("USD")
  remoteAllowed       Boolean         @default(false)
  isActive            Boolean         @default(true)
  applicationDeadline DateTime?
  createdAt           DateTime        @default(now())
  updatedAt           DateTime        @updatedAt

  employer     Employer      @relation(fields: [employerId], references: [id], onDelete: Cascade)
  applications Application[]
  jobSkills    JobSkill[]

  @@map("jobs")
}

model Employer {
  id          Int      @id @default(autoincrement())
  userId      Int      @unique
  companyName String
  industry    String?
  companySize String?
  website     String?
  description String?
  logoUrl     String?
  address     String?
  city        String?
  country     String?
  foundedYear Int?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobs Job[]

  @@map("employers")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int
  sessionToken String   @unique
  expiresAt    DateTime
  ipAddress    String?
  userAgent    String?
  createdAt    DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  type      String
  title     String
  message   String
  isRead    Boolean  @default(false)
  data      Json?
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

enum Role {
  candidate
  employer
  admin
}

enum EmploymentType {
  full_time  @map("full-time")
  part_time  @map("part-time")
  contract
  internship
  freelance
}

enum ExperienceLevel {
  entry
  junior
  mid
  senior
  lead
  executive
}

enum ApplicationStatus {
  pending
  reviewed
  shortlisted
  interviewed
  offered
  accepted
  rejected
  withdrawn
}

model Skill {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  category    String?
  description String?
  createdAt   DateTime @default(now())

  candidateSkills CandidateSkill[]
  jobSkills       JobSkill[]

  @@map("skills")
}

model JobSkill {
  id            Int              @id @default(autoincrement())
  jobId         Int
  skillId       Int
  requiredLevel ProficiencyLevel
  isRequired    Boolean          @default(true)
  weight        Decimal          @default(1.0) @db.Decimal(3, 2)
  createdAt     DateTime         @default(now())

  job   Job   @relation(fields: [jobId], references: [id], onDelete: Cascade)
  skill Skill @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([jobId, skillId])
  @@map("job_skills")
}

model CandidateSkill {
  id               Int              @id @default(autoincrement())
  candidateId      Int
  skillId          Int
  proficiencyLevel ProficiencyLevel
  yearsExperience  Int              @default(0)
  createdAt        DateTime         @default(now())

  candidate Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  skill     Skill     @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([candidateId, skillId])
  @@map("candidate_skills")
}

enum ProficiencyLevel {
  beginner
  intermediate
  advanced
  expert
}