// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int      @id @default(autoincrement())
  uuid          String   @unique @default(uuid())
  name          String
  email         String   @unique
  passwordHash  String   @map("password_hash")
  role          Role
  isActive      Boolean  @default(true) @map("is_active")
  emailVerified Boolean  @default(false) @map("email_verified")
  phone         String?
  avatarUrl     String?  @map("avatar_url")
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")
  lastLogin     DateTime? @map("last_login")

  // Relations
  employer      Employer?
  candidate     Candidate?
  sessions      Session[]
  notifications Notification[]

  @@map("users")
}

model Employer {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique @map("user_id")
  companyName  String   @map("company_name")
  industry     String?
  companySize  String?  @map("company_size")
  website      String?
  description  String?
  logoUrl      String?  @map("logo_url")
  address      String?
  city         String?
  country      String?
  foundedYear  Int?     @map("founded_year")
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  jobs Job[]

  @@map("employers")
}

model Candidate {
  id                Int       @id @default(autoincrement())
  userId            Int       @unique @map("user_id")
  firstName         String    @map("first_name")
  lastName          String    @map("last_name")
  dateOfBirth       DateTime? @map("date_of_birth")
  location          String?
  experienceYears   Int       @default(0) @map("experience_years")
  currentPosition   String?   @map("current_position")
  currentCompany    String?   @map("current_company")
  salaryExpectation Decimal?  @map("salary_expectation") @db.Decimal(10, 2)
  currency          String    @default("USD")
  availabilityDate  DateTime? @map("availability_date")
  linkedinUrl       String?   @map("linkedin_url")
  githubUrl         String?   @map("github_url")
  portfolioUrl      String?   @map("portfolio_url")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  applications     Application[]
  candidateSkills  CandidateSkill[]

  @@map("candidates")
}

model Job {
  id                  Int            @id @default(autoincrement())
  employerId          Int            @map("employer_id")
  title               String
  description         String
  requirements        String?
  responsibilities    String?
  location            String?
  employmentType      EmploymentType @map("employment_type")
  experienceLevel     ExperienceLevel @map("experience_level")
  salaryMin           Decimal?       @map("salary_min") @db.Decimal(10, 2)
  salaryMax           Decimal?       @map("salary_max") @db.Decimal(10, 2)
  currency            String         @default("USD")
  remoteAllowed       Boolean        @default(false) @map("remote_allowed")
  isActive            Boolean        @default(true) @map("is_active")
  applicationDeadline DateTime?      @map("application_deadline")
  createdAt           DateTime       @default(now()) @map("created_at")
  updatedAt           DateTime       @updatedAt @map("updated_at")

  // Relations
  employer     Employer      @relation(fields: [employerId], references: [id], onDelete: Cascade)
  applications Application[]
  jobSkills    JobSkill[]

  @@map("jobs")
}

model Application {
  id          Int               @id @default(autoincrement())
  jobId       Int               @map("job_id")
  candidateId Int               @map("candidate_id")
  status      ApplicationStatus @default(PENDING)
  coverLetter String?           @map("cover_letter")
  cvUrl       String?           @map("cv_url")
  appliedAt   DateTime          @default(now()) @map("applied_at")
  reviewedAt  DateTime?         @map("reviewed_at")
  notes       String?
  rating      Int?              @db.SmallInt
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")

  // Relations
  job       Job       @relation(fields: [jobId], references: [id], onDelete: Cascade)
  candidate Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)

  @@unique([jobId, candidateId])
  @@map("applications")
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @map("user_id")
  sessionToken String   @unique @map("session_token")
  expiresAt    DateTime @map("expires_at")
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  type      String
  title     String
  message   String
  isRead    Boolean  @default(false) @map("is_read")
  data      Json?
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model Permission {
  id        Int      @id @default(autoincrement())
  role      String
  resource  String
  action    String
  allowed   Boolean  @default(true)
  createdAt DateTime @default(now()) @map("created_at")

  @@unique([role, resource, action])
  @@map("permissions")
}

model Skill {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  category    String?
  description String?
  createdAt   DateTime @default(now()) @map("created_at")

  // Relations
  candidateSkills CandidateSkill[]
  jobSkills       JobSkill[]

  @@map("skills")
}

model CandidateSkill {
  id               Int             @id @default(autoincrement())
  candidateId      Int             @map("candidate_id")
  skillId          Int             @map("skill_id")
  proficiencyLevel ProficiencyLevel @map("proficiency_level")
  yearsExperience  Int             @default(0) @map("years_experience")
  createdAt        DateTime        @default(now()) @map("created_at")

  // Relations
  candidate Candidate @relation(fields: [candidateId], references: [id], onDelete: Cascade)
  skill     Skill     @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([candidateId, skillId])
  @@map("candidate_skills")
}

model JobSkill {
  id            Int             @id @default(autoincrement())
  jobId         Int             @map("job_id")
  skillId       Int             @map("skill_id")
  requiredLevel ProficiencyLevel @map("required_level")
  isRequired    Boolean         @default(true) @map("is_required")
  weight        Decimal         @default(1.0) @db.Decimal(3, 2)
  createdAt     DateTime        @default(now()) @map("created_at")

  // Relations
  job   Job   @relation(fields: [jobId], references: [id], onDelete: Cascade)
  skill Skill @relation(fields: [skillId], references: [id], onDelete: Cascade)

  @@unique([jobId, skillId])
  @@map("job_skills")
}

// Enums
enum Role {
  CANDIDATE @map("candidate")
  EMPLOYER  @map("employer")
  ADMIN     @map("admin")
}

enum EmploymentType {
  FULL_TIME  @map("full-time")
  PART_TIME  @map("part-time")
  CONTRACT   @map("contract")
  INTERNSHIP @map("internship")
  FREELANCE  @map("freelance")
}

enum ExperienceLevel {
  ENTRY     @map("entry")
  JUNIOR    @map("junior")
  MID       @map("mid")
  SENIOR    @map("senior")
  LEAD      @map("lead")
  EXECUTIVE @map("executive")
}

enum ApplicationStatus {
  PENDING      @map("pending")
  REVIEWED     @map("reviewed")
  SHORTLISTED  @map("shortlisted")
  INTERVIEWED  @map("interviewed")
  OFFERED      @map("offered")
  ACCEPTED     @map("accepted")
  REJECTED     @map("rejected")
  WITHDRAWN    @map("withdrawn")
}

enum ProficiencyLevel {
  BEGINNER     @map("beginner")
  INTERMEDIATE @map("intermediate")
  ADVANCED     @map("advanced")
  EXPERT       @map("expert")
}
